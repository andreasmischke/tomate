{"version":3,"sources":["components/ProgressBar.tsx","components/TextTimer.tsx","components/StopButton.tsx","components/StartButton.tsx","components/ResetButton.tsx","components/Controls.tsx","components/Timer.tsx","constants/colors.ts","serviceWorker.js","index.js","App.tsx"],"names":["Bar","styled","div","_templateObject","props","color","Progress","_templateObject2","concat","percentage","ProgressBar","react_default","a","createElement","Timer","TextTimer_templateObject","Time","span","TextTimer_templateObject2","TextTimer","time","StopButton","button","StopButton_templateObject","StartButton","StartButton_templateObject","ResetButton","ResetButton_templateObject","Wrapper","Controls_templateObject","Controls","onReset","onStart","onStop","active","components_StopButton","onClick","components_StartButton","components_ResetButton","main","Timer_templateObject","fillZeroLeft","n","String","padStart","secondsToString","seconds","minutes","Math","floor","secs","endDate","duration","_useState","useState","_useState2","Object","slicedToArray","setActive","_useState3","_useState4","timeLeft","setTimeLeft","_useState5","_useState6","setPercentage","useEffect","interval","setInterval","msLeft","getTime","Date","now","clearInterval","Timer_Wrapper","console","log","COLORS","RED","YELLOW","GREEN","Boolean","window","location","hostname","match","ReactDOM","render","Timer_Timer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39cf9477.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Bar = styled.div`\r\n  position: absolute;\r\n  display: flex;\r\n  align-items: flex-end;\r\n  background: ${props => props.color};\r\n  height: 100vh;\r\n  width: 100vw;\r\n  opacity: 0.5;\r\n`;\r\n\r\ninterface ProgressProps {\r\n  percentage: number;\r\n}\r\nconst Progress = styled.div<ProgressProps>`\r\n  background: #ffffff22;\r\n  height: ${props => `${props.percentage}%`};\r\n  width: 100vw;\r\n`;\r\n\r\ninterface ProgressBarProps {\r\n  color: string;\r\n  percentage: number;\r\n}\r\n\r\nexport default function ProgressBar(props: ProgressBarProps) {\r\n  const {\r\n    color,\r\n    percentage,\r\n  } = props;\r\n\r\n  return (\r\n\r\n    <Bar color={color}>\r\n      <Progress percentage={percentage} />\r\n    </Bar>\r\n  );\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Timer = styled.div`\r\n  position: absolute;\r\n  display: flex;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Time = styled.span`\r\n  display: block;\r\n  font-size: 30vw;\r\n  line-height: 10vw;\r\n  color: #fff;\r\n`\r\n\r\ninterface TextTimerProps {\r\n  time: string;\r\n}\r\n\r\nexport default function TextTimer(props: TextTimerProps) {\r\n  const {\r\n    time,\r\n  } = props;\r\n\r\n  return (\r\n    <Timer>\r\n      <Time>\r\n        {time}\r\n      </Time>\r\n    </Timer>\r\n  )\r\n};","import styled from 'styled-components';\r\n\r\nconst StopButton = styled.button`\r\n  width: 10vw;\r\n  height: 10vw;\r\n  background: #ffffff77;\r\n  border: none;\r\n`;\r\n\r\nexport default StopButton;","import styled from 'styled-components';\r\n\r\nconst StartButton = styled.button`\r\n  display: block;\r\n  border-style: solid;\r\n  border-width: 5vw 0 5vw 10vw;\r\n  border-color: transparent transparent transparent #ffffff77;\r\n  background: transparent;\r\n  width: 0;\r\n  height: 0;\r\n  padding: 0;\r\n`;\r\n\r\nexport default StartButton;","import styled from 'styled-components';\r\n\r\nconst ResetButton = styled.div`\r\n  display: inline-block;\r\n  width: 10vw;\r\n  height: 10vw;\r\n  position: relative;\r\n  padding: 0;\r\n  background: none;\r\n  border-top: 1vw solid #ffffff77;\r\n  border-bottom: 1vw solid #ffffff78;\r\n  border-right: 1vw solid #ffffff77;\r\n  border-left: 1vw solid transparent;\r\n  border-radius: 10vw;\r\n\r\n  :after {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    border-top: 3vw solid transparent;\r\n    border-bottom: 3vw solid transparent;\r\n    border-right: 3vw solid #ffffff77;\r\n    transform: rotate(-45deg) translate(-0.5vw,-1.3vw);\r\n  }\r\n`;\r\n\r\nexport default ResetButton;","import React from 'react';\r\nimport StopButton from './StopButton';\r\nimport StartButton from './StartButton';\r\nimport styled from 'styled-components';\r\nimport ResetButton from './ResetButton';\r\n\r\nconst Wrapper = styled.div`\r\n  position: absolute;\r\n  display: flex;\r\n  flex-direction: column;\r\n  top: 50vh;\r\n  padding-top: 20vw;\r\n  width: 100vw;\r\n  height: 30vw;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\ninterface ControlsProps {\r\n  onReset: () => void;\r\n  onStart: () => void;\r\n  onStop: () => void;\r\n  active: boolean;\r\n}\r\n\r\nexport default function Controls(props: ControlsProps) {\r\n  const {\r\n    onReset,\r\n    onStart,\r\n    onStop,\r\n    active,\r\n  } = props;\r\n\r\n  if (active) {\r\n    return (\r\n      <Wrapper>\r\n        <StopButton onClick={onStop} />\r\n      </Wrapper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <StartButton onClick={onStart} />\r\n      <ResetButton onClick={onReset} />\r\n    </Wrapper>\r\n  );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport ProgressBar from './ProgressBar';\r\nimport styled from 'styled-components';\r\nimport TextTimer from './TextTimer';\r\nimport Controls from './Controls';\r\n\r\nconst Wrapper = styled.main`\r\n  background: #222;\r\n  height: 100vh;\r\n  width: 100vw;\r\n`;\r\n\r\ninterface TimerProps {\r\n  color: string;\r\n  endDate: Date;\r\n  duration: number;\r\n}\r\n\r\nfunction fillZeroLeft(n: number): string {\r\n  return String(n).padStart(2, '0');\r\n}\r\n\r\nfunction secondsToString(seconds: number) {\r\n  const minutes = fillZeroLeft(Math.floor(seconds / 60));\r\n  const secs = fillZeroLeft(seconds % 60);\r\n\r\n  return `${minutes}:${secs}`;\r\n}\r\n\r\nexport default function Timer(props: TimerProps) {\r\n  const {\r\n    color,\r\n    endDate,\r\n    duration,\r\n  } = props;\r\n\r\n  const [active, setActive] = useState<boolean>(false);\r\n  const [timeLeft, setTimeLeft] = useState<string>(secondsToString(duration));\r\n  const [percentage, setPercentage] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    function updateCalculateRemainingTime(): void {\r\n      const msLeft = endDate.getTime() - Date.now();\r\n      const seconds = Math.floor(msLeft / 1000);\r\n\r\n      setTimeLeft(secondsToString(seconds));\r\n      setPercentage((1 - (seconds) / duration) * 100);\r\n\r\n      if(msLeft < 1000) {\r\n        setActive(false);\r\n      }\r\n    }\r\n\r\n    if (active) {\r\n      const interval = setInterval(updateCalculateRemainingTime, 1000);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [endDate, active])\r\n\r\n  return (\r\n    <Wrapper>\r\n      <TextTimer time={timeLeft} />\r\n      <ProgressBar color={color} percentage={percentage} />\r\n      <Controls\r\n        onReset={() => console.log('TODO')}\r\n        onStart={() => setActive(true)}\r\n        onStop={() => setActive(false)}\r\n        active={active}\r\n      />\r\n    </Wrapper>\r\n  );\r\n}\r\n","export const COLORS = {\r\n  RED: '#600',\r\n  YELLOW: '#660',\r\n  GREEN: '#060',\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect, useState } from 'react';\nimport Timer from './components/Timer';\nimport { COLORS } from './constants/colors';\n\nexport default function App() {\n  const duration = 0.5 * 60;\n  const [endDate] = useState<Date>(new Date(Date.now() + duration * 1000 + 1000));\n\n  return (\n    <Timer\n      color={COLORS.GREEN}\n      duration={duration}\n      endDate={endDate}\n    />\n  );\n}\n"],"sourceRoot":""}